2025-6-11
今天收到老板的一封邮件：
For the get token API, we generate a bearer token. I'm thinking we might need to include the details about this as the encryption covers hashing algorithms as well. Let me know your thoughts
If we do we will need to know:
•	How we generate the token - I guess we use a library for doing this. JWT tokens?
•	Encryption algorithms
•	Key lengths etc used 
看到这个邮件一头雾水，不知其所云。因为我不写代码，更不知道我们的api是怎么提供token的。这不是得回答老板问题嘛，好家伙，各种检索和理解，幸亏有AI，提高了我检索的效率。

经过研究发现 :)， 原来我们的代码中是通过Microsoft.Owin.Security.OAuth实现了对token的加密和处理。、
整个过程就丝滑了：
1.	The client sends a POST request to /Token, including the username and password.
2.	The OWIN framework invokes the ApplicationOAuthProvider.GrantResourceOwnerCredentials method to validate the user credentials.
3.	If the validation succeeds, the OWIN framework automatically generates and signs a token, then returns it to the client.
4.	After receiving the token, the client includes Authorization: Bearer {token} in subsequent requests, and the server automatically validates the token.

可以回答老板的问题了：
•	How we generate the token - I guess we use a library for doing this. JWT tokens?
The token is generated by the OWIN OAuth2 middleware (Microsoft.Owin.Security.OAuth). When a client sends a POST request to /Token with valid credentials, the OWIN framework validates the user and issues a bearer token.
By default, this token is not a JWT; it is an opaque, encrypted token managed internally by OWIN. The token format and content are not directly accessible or decodable by the client.
•	Encryption algorithms
The default OWIN bearer token is encrypted and signed using internal mechanisms of the OWIN middleware.
The specific encryption algorithms and key lengths are managed by the framework and are not exposed or configurable in detail unless you implement a custom token format (such as JWT).

还顺便问了下隔壁组，他们是怎么实现token加密的，回答居然是JWT，好家伙
小伙伴分享了开源代码：https://github.com/Thalhammer/jwt-cpp


